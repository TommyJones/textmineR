% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/topic_modeling_core.R
\name{fit_lsa_model}
\alias{fit_lsa_model}
\alias{FitLsaModel}
\title{Fit a topic model using Latent Semantic Analysis}
\usage{
fit_lsa_model(dtm, k, calc_coherence = TRUE, return_all = FALSE, ...)

FitLsaModel(dtm, k, calc_coherence = TRUE, return_all = FALSE, ...)
}
\arguments{
\item{dtm}{A document term matrix of class \code{Matrix::dgCMatrix}}

\item{k}{Number of topics}

\item{calc_coherence}{Do you want to calculate probabilistic coherence of
topics after the model is trained? Defaults to \code{TRUE}.}

\item{return_all}{Should all objects returned from \code{RSpectra::svds} be
returned here? Defaults to \code{FALSE}}

\item{...}{Other arguments to pass to \code{\link[RSpectra]{svds}} through
its \code{opts} parameter.}
}
\value{
Returns a list with a minimum of three objects: \code{phi},
\code{theta}, and \code{sv}. The rows of \code{phi} index topics and the
columns index tokens. The rows of \code{theta} index documents and the
columns index topics. \code{sv} is a vector of singular values.
}
\description{
A wrapper for \code{RSpectra::svds} that returns
a nicely-formatted latent semantic analysis topic model.
}
\details{
Latent semantic analysis, LSA, uses single value decomposition to
factor the document term matrix. In many LSA applications, TF-IDF weights are
applied to the DTM before model fitting. However, this is not strictly
necessary.
}
\examples{
# Load a pre-formatted dtm
data(nih_sample_dtm)

# Convert raw word counts to TF-IDF frequency weights
idf <- log(nrow(nih_sample_dtm) / Matrix::colSums(nih_sample_dtm > 0))

dtm_tfidf <- Matrix::t(nih_sample_dtm) * idf

dtm_tfidf <- Matrix::t(dtm_tfidf)

# Fit an LSA model
model <- fit_lsa_model(dtm = dtm_tfidf, k = 5)

str(model)
}
